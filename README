vecscreen_plus_taxonomy
Author: Alejandro Schaffer

github: https://github.com/aaschaffer/vecscreen_plus_taxonomy.git
Version: 0.02
------------------
README

This file describes

-- a script called from_vecscreen_to_summary.pl and its constituent
programs

and
-- a summary classification script compare_vector_matches_wtaxa.pl
that can be used to run vecscreen and parse its outputs, including
taxonomy information.

Outline of this file:

BACKGROUND
SETTING UP ENVIRONMENT VARIABLES
SAMPLE RUN, USAGE AND OUTPUT OF from_vecscreen_to_summary.pl
SAMPLE RUN, USAGE AND OUTPUT OF compare_vector_matches_w_taxa.pl
RELEVANT FILES
METHODS
CREATING THE TAXONOMY FILE

**************
**BACKGROUND**
**************

vecscreen is the established NCBI program to identify matches between
(query) sequences and (subject) vectors in UniVec. These matches may
represent (true) vector contamination, but experience has shown that
there can be many false positives.  A primary reason for false
positives is that the query and the matching subject segment come from
the same genus or closely related genera. Therefore, knowing the genus
of the query sequence is helpful to interpret the output.  For what
follows below, it is relevant that vecscreen distinguishes matches by
two characteristics:

1) Location: Internal or Terminal 
A match is Terminal if and only if it includes a nucleotide within 25
positions of either end of the query; otherwise, the match is Internal.

2) Strength: Strong, Moderate, or Weak
A match is Strong if either: it is Terminal with a raw score of at
least 24 or it is Internal with a raw score of at least 30.

A match is Moderate if either: it is Terminal with a raw score in the
interval [19,23] or Internal with a raw score in the interval [25,29].

A match is Weak if it is Terminal with a raw score in the interval
[16,18] or Internal with a raw score in the interval [23,24].

vecscreen also reports Internal alignments with raw scores in the
range [16, 22] when there is also a reportable match for the same
(query, vector) pair. The score range [16,22] is below the Weak range
match for Internal matches. In the script
from_vecscreen_to_summary.pl, these below-Weak Internal matches are
assigned the level None.

More information about vecscreen can be found at
https://www.ncbi.nlm.nih.gov/tools/vecscreen/about/
In this document, 'vecscreen' refers to the command-line version, not
the Web page version.

************************************
**SETTING UP ENVIRONMENT VARIABLES**
************************************

Before you can run from_vecscreen_to_summary.pl or
compare_vector_matches_wtaxa.pl you will need to update some of your
command line variables. To do this, add the following three lines to
your .bashrc file (if you use bash shell) or .cshrc file (if you use C
shell or tcsh). The .bashrc or .cshrc file will be in your home
directory. To determine what shell you use type 'echo $SHELL', if it
returns '/bin/bash', then update your .bashrc file, if it returns
'/bin/csh' or '/bin/tcsh' then update your .cshrc file.

The 2 lines to add to your .bashrc file, ***but make sure that you
replace *PATH/TO/VEC/PLUS* with the directory path to the directory
created when you unpacked the FIXME tarball.

-----------
export VECPLUSDIR="*PATH/TO/VEC/PLUS*"
export PATH="$VECPLUSDIR:$PATH";
-----------

The 2 lines to add to your .cshrc file:
-----------
setenv SENSORDIR "*PATH/TO/VEC/PLUS"
setenv PATH "$VECPLUSDIR":"$PATH"
-----------

Then, after adding those 2 lines, execute this command:
source ~/.bashrc
OR
source ~/.cshrc

To check that your environment variables are properly set up do the
following three commands:
echo $VECPLUSDIR
echo $PATH

The first command should return only:
*PATH/TO/VEC/PLUS*

The second echo commands should return a potentially longer
string that begins with the same path:
*PATH/TO/VEC/PLUS*

If that is not the case, please email Eric Nawrocki
(nawrocke@ncbi.nlm.nih.gov). If you do see the expected output, the
following sample run should work.

****************************************************************
**SAMPLE RUN, USAGE AND OUTPUT OF from_vecscreen_to_summary.pl**
****************************************************************
Here is an example command that will run from_vecscreen_to_summary.pl
on the fasta file myseqs.fa using the taxonomy file
taxonomy_tree_wlevels.txt. (An example of running compare

> from_vecscreen_to_summary.pl --input_fasta myseqs.fa --input_taxa $VECPLUSDIR/taxonomy_tree_wlevels.txt --output_root mytest

The sequence file (myseqs.fa) can be any nucleotide sequence file in
FASTA format.

The taxonomy file (taxonomy_tree_wlevels.txt) is a file in a special
format that includes taxonomy information based on NCBI's
taxonomy. This can either be created by the user from the NCBI
taxonomy file, or the user can use the provided file:

/panfs/pan1.be-md.ncbi.nlm.nih.gov/dnaorg/2015.09/vector_screening/test9b/taxonomy_tree_wlevels.txt
which was created in March 2017. If you are using this in the first
few months of 2017, the provided file above should be fine. After
that, you should create a new up-to-date file. Instructions for doing
that are provided below in the section CREATING THE TAXONOMY FILE.

The options that can be provided to from_vecscreen_to_summary.pl are:
  --input_fasta <s> : REQUIRED: file name <s> with sequences in fasta format 
  --input_taxa <s>  : REQUIRED: file name <s> mapping vecscreen matches to taxa
  --output_root <s> : REQUIRED: output files will be named starting with <s>
  --verbose         : output 11 columns instead of 5
  --combine_output  : combine internal and terminal matches
  --keep	    : keep all intermediate files (e.g. vecscreen output)

The --input_fasta <s> and --input_taxa <s> and --output_root <s>
options are required when running from_vecscreen_to_summary.pl, while
--verbose and --combine_output and --keep are optional.  By default
--verbose and --combine_output and --keep are all turned off.

The --combine_output option determines whether one or two files of
output are produced.  Currently the names of the output files are
partly fixed at:
<output_root>.output_combined_wtaxonomy.txt (if --combine_output is applied) 
<output_root>.output_internal_wtaxonomy.txt (if --combine_output is not applied) 
<output_root>.output_terminal_wtaxonomy.txt (if --combine_output is not applied)

The option --verbose determines how many columns of output are
produced, as described in the OUTPUT section below. It does not cause
more diagnostic output to be printed during the execution of the
script.

The option --keep determines whether the output file from running
vecscreen within the script is kept (--keep used) or deleted (--keep
not used, default).

from_vecscreen_to_summary.pl will create one line of tabular output
per vecscreen hit in the input sequence file. There are two possible
output formats. For both formats, columns are separated by tabs.

--------------------------------
Default output format: 5 columns
--------------------------------
By default (if --verbose is not used) then the format of those lines
will be the following five columns:

Column 1: Accession of query
Column 2: Genus of query if known, or 1 otherwise
Column 3: Matching vector, starting with uv|
Column 4: One end of the alignment in the vector
Column 5: The other end of the alignment in the vector

This 5 column format was agreed on for internal NCBI usage in JIRA
ticket SM-187.

----------------------------------------------------------------
Verbose output format (enabled with --verbose option): 11 columns
----------------------------------------------------------------
If --verbose is used, then each line of output will include the
following 11 columns:

Column 1:  Accession of query
Column 2:  Genus of query if known, or 1 otherwise
Column 3:  Species of query if known, or 1 otherwise
Column 4:  Lower end of the alignment in the vector
Column 5:  Upper end of the alignment in the vector
Column 6:  Matching vector, starting with uv|
Column 7:  One end of the alignment in the vector
Column 8:  The other end of the alignment in the vector
Column 9:  The strength of this vecscreen match 
Column 10: The strength of the strongest vecscreen match for this query
Column 11: Whether there is any dangling part (called "Suspect" by
           vecscreen) at either end of the query

A dangling part is an unmatched segment of <= 25 nucleotides.

This alternative 11-column format has been shown to be useful for some
purposes, such as correcting vector-contaminated sequences in GenBank.

*********************************************************************
**SAMPLE RUN, USAGE, AND OUTPUT OF compare_vector_matches_w_taxa.pl**
*********************************************************************
The compare_vector_matches_w_taxa.pl script can only be run on the
11-column output of from_vecscreen_to_summary.pl that is created when
the --verbose option is used for that script.

Here is the example usage of compare_vector_matches_wtaxa.pl. This
command is included as a shell script in the file sample_compare_run. 

compare_vector_matches_wtaxa.pl \ 
--input_summary $VECPLUSDIR/test-files/sample_input_final_step.txt \ 
--input_taxa $VECPLUSDIR/taxonomy_tree_wlevels.txt \ 
--input_artificial_vectors $VECPLUSDIR/artificial_whole_sequences.txt \ 
--input_artificial_segments $VECPLUSDIR/artificial_intervals.txt \ 
--input_univec_sources $VECPLUSDIR/biological_exclusions.txt \ 
--input_amr $VECPLUSDIR/UniVec10_vs_amr_distinct_intervals.txt \
--input_sequences $VECPLUSDIR/test-files/candidates.fa \
--outfile my_output_final_step2.txt

After running this, the file 'my_output_final_step.txt' will include
the output of compare_vector_matches_wtaxa.pl which is the file
test-files/sample_input_final_step.txt with 3 additional columns:

Column 12: the classification of the match
Column 13: Most pertinent taxid of the vector interval 
Column 14: Lowest common ancestor of column 2 and column 13

In some cases, the classification TRUE_BIOLOGICAL may be too bold and
this can be seen because Column 14 is not much higher up the taxonomy
tree than column 13.  When this happens, the conservation of the
vector source needs to be propagated from genus_level_exclusions.txt
to one of the higher-level files*:
   superkingdom_level_exclusions.txt
   kingdom_level_exclusions.txt
   phylum_level_exclusions.txt
   class_level_exclusions.txt
   order_level_exclusions.txt
   family_level_exclusions.txt
   tribe_level_exclusions.txt

* Please email schaffer@ncbi.nlm.nih.gov if you find any examples of
  these.

******************
**RELEVANT FILES**
******************
Several executable files are required for from_vecscreen_to_summary.pl
to work. Two of these executables were developed by others and must be
downloaded and installed separately outside of NCBI. All of these
files are included in the FIXME tarball, so you do not need to create or
move any files in order to get from_vecscreen_to_summary.pl to work.

The first two files are NCBI executable programs that were not authored by
Alejandro Schaffer:

1. vecscreen 
   Identifies vector contamination in input sequences.

   Within NCBI, vecscreen can be found at
   /netopt/ncbi_tools64/c++.stable/ReleaseMT/bin/vecscreen

   To add this directory to your path execute this command:
   > ln -s /netopt/ncbi_tools64/c++.stable/ReleaseMT/bin/vecscreen .

   External users can download vecscreen here:
   TODO

2. srcchk 
   Determines the taxonomy of input sequences, with respect the NCBI
   taxonomy tree.

   Within NCBI, srcchk can be found at
   /netopt/ncbi_tools64/bin/srcchk

   To add this directory to your path execute this command:
   > ln -s /netopt/ncbi_tools64/bin/srcchk .

   External users can download srcchk here:
   TODO

The next 6 files were included with this software distribution: 

3. from_vecscreen_to_summary.pl 
   This is the main script that coordinates the work by calling the
   other executables listed below.

   /panfs/pan1.be-md.ncbi.nlm.nih.gov/dnaorg/2015.09/vector_screening/test9b/from_vecscreen_to_summary.pl

4. parse_vecscreen.pl
   Auxiliary script called by from_vecscreen_to_summary.pl that parses
   the vecscreen output.
   
   /panfs/pan1.be-md.ncbi.nlm.nih.gov/dnaorg/2015.09/vector_screening/test9b/parse_vecscreen.pl

5. combine_summaries.pl
   Auxiliary script called by from_vecscreen_to_summary.pl that
   combines two different output formats of parse_vecscreen.pl

   /panfs/pan1.be-md.ncbi.nlm.nih.gov/dnaorg/2015.09/vector_screening/test9b/combine_summaries.pl

6. add_taxonomy.pl
   Auxiliary script called by from_vecscreen_to_summary.pl that adds
   taxonomy information to the output of parse_vecscreen.pl.

   /panfs/pan1.be-md.ncbi.nlm.nih.gov/dnaorg/2015.09/vector_screening/test9b/add_taxonomy.pl

7. assign_levels_to_taxonomy.pl
   Independent script that is used to create a taxonomy file from the
   NCBI taxonomy. The file produced by assign_levels_to_taxonomy.pl is
   required input to from_vecscreen_to_summary.pl.

   /panfs/pan1.be-md.ncbi.nlm.nih.gov/dnaorg/2015.09/vector_screening/test9a/assign_levels_to_taxonomy.pl


8. epn-options.pm
   A perl module authored by Eric Nawrocki to handle command line
   options.

   /panfs/pan1.be-md.ncbi.nlm.nih.gov/dnaorg/2015.09/vector_screening/test9b/epn-options.pm

Additionally, several sets of data files are required for
compare_vector_matches_wtaxa.pl to work. These were all included with
this software distribution. 

1. taxonomy_tree_wlevels.txt 
   A compact form of NCBI's taxonomy tree with added fields to
   indicate for each taxid, its level and whether it is a descendant
   of the node Bacteria.  Descendants of Bacteria are treated
   specially because many sequences are now assigned to the generic
   taxid "Uncultured bacteria"

2. UniVec10_vs_amr_distinct_intervals.txt
   Intervals of vectors from UniVec version 10 that overlap with known
   antimicrobial resistance (AMR) regions.

3. artificial_intervals.txt, artificial_whole_sequences.txt
   Vector intervals or whole vectors that were generated in a
   laboratory, not from a biological source. Many of these are known
   also as "adaptors".

4. biological_exclusions.txt (which lists the following files)
   superkingdom_level_exclusions.txt
   kingdom_level_exclusions.txt
   phylum_level_exclusions.txt
   class_level_exclusions.txt
   order_level_exclusions.txt
   family_level_exclusions.txt
   tribe_level_exclusions.txt
   genus_level_exclusions.txt

   The last listed file genus_level_exclusions.txt describes the
   biological sources of vector segments at genus level. The other
   files summarize in silico sequence analysis that shows that some
   vector segments are conserved at seven taxonomic levels higher than
   genus. In these files, as well as artificial_intervals.txt:
   Column 1 is the vector segment using UniVec notation
   Columns 2 and 3 are the start and end of the interval
   Column 4 is the taxid
   Column 5 is either the Latin or English name for the taxid

5. Microsatellite_vectors.txt a list of vectors that contain
   microsatellites; Sequences that have known microsatellites and
   match to these vectors are classified specially as TRUE_MICROSAT or
   TRUE_ARTIFICAL_MICROSAT

6. compare_vector_matches_wtaxa.pl

   Program to classify vecscreen matches that have already been parsed
   with from_vecscreen_to_summary.pl. Matches can be classified as:

 A. NO_DATA:           there is no data about the source of the vector
                       segment in the match.

 B. TRUE_ARTIFICIAL:   the vector segment matched is an ARTIFICIAL
                       sequence and hence the match is TRUE
                       contamination.

 C. TRUE_ARTIFICIAL_MICROSAT: the vector segment matched is an
                              ARTIFICIAL sequence and hence the match
                              is TRUE contamination and the vector
                              contains a microsatellite.

 D. FALSE_AMR:         the query sequence is bacterial; the vector
                       segment matches a known sequence that confers
                       anti-microbial resistance and these can often
                       be transferred horizontally between bacteria
                       that may be taxonomically distant.

 E. FALSE_BIOLOGICAL:  the subject's biological origin is known and
                       its taxid is deemed close enough to that of the
                       query, so that the match is not contamination.

 F. TRUE_BIOLOGICAL :  the query and the matching subject originate from
                       taxa that are too far apart for the vector to occur
                       plausibly in the query.

 G. TRUE_MICROSAT :    the query and the matching subject originate from
                       taxa that are too far apart for the vector to
                       occur plausibly in the query, and the vector
                       contains a microsatellite.

 H. LIKE_FALSE_BACTERIAL: the query is from uncultured bacteria and
                          the matching subject isfrom bacteria

7. sample_compare_run
   Example usage of compare_vector_matches_wtaxa.pl. 

***********
**METHODS**
***********

Given the input taxonomy file and an input sequence file in FASTA
format, from_vecscreen_to_summary.pl will do the following:

1) Run vecscreen on the input FASTA-formatted sequence file to
   identify high-scoring matches to known vector sequences in UniVec
   in the input sequence file.

2) Parse the vecscreen output into two tab-delimited files for
   internal and terminal matches by calling parse_vecscreen.pl.

3) Optionally combine the two summary files into one by calling
   combine_summaries.pl.

4) Add taxonomy information to the vecscreen output by calling srcchk
   and add_taxonomy.pl.

compare_vector_matches_wtaxa.pl uses the six sets of data files listed
to classify each vecscreen match.  This program is separate because an
in-house usage needed somewhat different I/O specifications to fit
into an existing software framework.

******************************
**CREATING THE TAXONOMY FILE**
******************************
This section describes how to create the taxonomy input file (passed
in to from_vecscreen_to_summary.pl with the --input_taxa <s> option)
using the NCBI taxonomy file.

NCBI's taxonomy is available from directory
ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/.

We start from any of the files: 
taxdmp.tar.Z 
taxdump.tar.gz 
taxdmp.zip
from which one can extract the file nodes.dmp.

Then execute the following commands:

> cut -f1,3,5 nodes.dmp > taxonomy_tree.txt
> assign_levels_to_taxonomy.pl --input_taxa taxonomy_tree.txt --outfile taxonomy_tree_wlevels.txt

taxonomy_tree.txt will have three columns:
Column 1: taxid as an an integer
Column 2: parent taxid as an an integer
Column 3: rank (e.g., phylum) as a word

Running assign_levels_to_taxonomy.pl will add a fourth column which is
the level in the taxonomy tree, where the root has level 1 and each
child taxid has a level one greater than the level of its parent
taxid.

*******************************************
Send any comments or questions to Alejandro Schaffer
(schaffer@ncbi.nlm.nih.gov)

New information about vector biological sources and cases in which
known genus-level sources should be propagated to a higher level are
especially welcome.
